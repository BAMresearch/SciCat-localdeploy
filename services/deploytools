# services/deploytools
# helper functions for use in several places
# USAGE:
#   $ source services/deploytools

cmdExists()
{
    command -v "$1" > /dev/null
}

# replace needed docker commands if alternatives are used
DOCKER_BUILD="docker build"
DOCKER_PUSH="docker push"
if ! cmdExists docker; then
    DOCKER_BUILD="buildah bud"
    DOCKER_PUSH="buildah push"
fi

# makes sure required ENV vars exist (supplied by arguments)
checkVars()
{
    for name in $@; do
        if eval "[ -z \"\$$name\" ]"; then
            echo "$name not defined! Please run 'export $name=<your value>' first."
            return 1
        fi
    done
}

getScriptFlags()
{
    local key="$1"
    shift
    (echo "$@" | grep -qi "\\<$key\\>") && echo true
}

namespaceExists()
{
    kubectl get ns -A -o name | grep -q "\\<$1\\>"
}

loadSiteConfig()
{
    local fx="loadSiteConfig():"
    if [ -z "$SC_SITECONFIG" ]; then
        SC_SITECONFIG="$(readlink -f siteconfig)"
        echo "$fx SC_SITECONFIG is not set, using '$SC_SITECONFIG'."
    fi
    export SC_SITECONFIG
    if [ ! -d "$SC_SITECONFIG" ]; then
        echo "$fx site config path does not exist, creating it: '$SC_SITECONFIG'!"
        # generate some passwords before starting any services
        mkdir -p "$SC_SITECONFIG"
    fi
    local fn="$SC_SITECONFIG/general.rc"
    if [ ! -f "$fn" ]; then
        echo "$fx WARNING: Missing general settings in '$fn'!"
        echo "    -> Creating a template, please fill it out."
        cmdExists apg || (echo "Password generator 'apg' required! Giving up."; return)
        cat > "$fn" << EOF
export DOMAINBASE=
export SC_NAMESPACE=yourns
# letsencrypt working dir
export LE_WORKING_DIR=
# settings for the private image registry
export SC_REGISTRY_PORT=
export SC_REGISTRY_NAME=img.\$DOMAINBASE
export SC_REGISTRY_USER=foo
export SC_REGISTRY_PASS=$(apg -m 17 -n1 -M NCL)
export SC_REGISTRY_PUB=\$LE_WORKING_DIR/fullchain.cer
export SC_REGISTRY_KEY=\$LE_WORKING_DIR/\$DOMAINBASE.key
# settings for the api backend catamel
export SC_CATAMEL_FQDN=api.\$DOMAINBASE
export SC_CATAMEL_PUB=\$LE_WORKING_DIR/fullchain.cer
export SC_CATAMEL_KEY=\$LE_WORKING_DIR/\$DOMAINBASE.key
# settings for the gui frontend catanie
export SC_CATANIE_FQDN=\$DOMAINBASE
export SC_CATANIE_PUB=\$LE_WORKING_DIR/fullchain.cer
export SC_CATANIE_KEY=\$LE_WORKING_DIR/\$DOMAINBASE.key
# settings for the landing page server
export SC_LANDING_FQDN=landing.\$DOMAINBASE
export SC_LANDING_PUB=\$LE_WORKING_DIR/fullchain.cer
export SC_LANDING_KEY=\$LE_WORKING_DIR/\$DOMAINBASE.key
# settings for the logbook/chat server
export SC_SCICHAT_FQDN=chat.\$DOMAINBASE
export SC_SCICHAT_PUB=\$LE_WORKING_DIR/fullchain.cer
export SC_SCICHAT_KEY=\$LE_WORKING_DIR/\$DOMAINBASE.key
export SC_MEDIA_PATH=
export SC_SITE_NAME="Open Science Data"
EOF
        exit 1
    fi
    . "$fn"
    # derive some values from the basic settings
    export NS="$SC_NAMESPACE"
    export SC_REGISTRY_ADDR="$SC_REGISTRY_NAME"
    [ -z "$SC_REGISTRY_PORT" ] || export SC_REGISTRY_ADDR="$SC_REGISTRY_NAME:$SC_REGISTRY_PORT"
}

registryLogin()
{
    # extra arguments if the registry need authentication as indicated by a set password
    if [ ! -z "$SC_REGISTRY_PASS" ]; then # auth required
        if cmdExists docker; then
            echo "$SC_REGISTRY_PASS" | \
                docker login -u "$SC_REGISTRY_USER" --password-stdin "$SC_REGISTRY_ADDR" > /dev/null
        else
            authargs="--creds \$SC_REGISTRY_USER:\$SC_REGISTRY_PASS"
        fi
    fi
    echo "$authargs"
}

registryLogout()
{
    cmdExists docker && docker logout "$SC_REGISTRY_ADDR"
}

# set the private registry credentials to the service account pulling scicat builds later
# see https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# and https://www.digitalocean.com/community/questions/using-do-k8s-container-registry-authentication-required
# alternatively https://stackoverflow.com/a/63643081
setRegistryAccessForPulling()
{
    kubectl -n "$SC_NAMESPACE" patch serviceaccount default \
        -p "{\"imagePullSecrets\": [{\"name\": \"reg-cred\"}]}"
    kubectl -n "$SC_NAMESPACE" create secret docker-registry "reg-cred" \
        --docker-server="$SC_REGISTRY_NAME" --docker-username="$SC_REGISTRY_USER" --docker-password="$SC_REGISTRY_PASS"
    # check details with:
    # kubectl -n "$SC_NAMESPACE" get secret "reg-cred" -o="jsonpath={.data.\.dockerconfigjson}" | base64 --decode
}

createTLSsecret()
{
    local ns="$1"
    local secretName="$2"
    local pathPub="$3"
    local pathKey="$4"
    local fx="createTLSsecret()"
    [ -z "$secretName" ] && (echo "$fx: Secret name is empty!"; return)
    [ -f "$pathPub" ] || (echo "$fx: Public certificate file does not exist: '$pathPub'!"; return)
    [ -f "$pathKey" ] || (echo "$fx: Private key file does not exist: '$pathKey'!"; return)
    [ -z "$ns" ] || ns="-n $ns"
    kubectl $ns create secret tls "$secretName" \
        --cert="$pathPub" --key="$pathKey" \
        --dry-run=client -o yaml | kubectl apply -f -
}

getHostAddr()
{
    local devpath devname hostaddr
    devpath="$(readlink -f /sys/class/net/* | awk '{print $NF}' | grep -v vir)"
    devname="${devpath##*/}"
    hostaddr="$(ifconfig "$devname" | awk '/inet / {print $2}')"
    echo "$hostaddr"
}

injectEnvConfig()
{
    local prj="$1"
    local ns="$2"
    local angEnv="$3"
    local angBuildCfg="$4"
    local envfn="src/environments/environment.$ns.ts"

    echo "$angEnv" > "$envfn"

    local tmpcfg; tmpcfg="$(mktemp)"
    # delete existing settings in angular config
    jq "del(.projects.$prj.architect.build.configurations.$ns,
            .projects.$prj.architect.serve.configurations.$ns,
            .projects.$prj.architect.server.configurations.$ns)" angular.json | \
    jq ".projects.$prj.architect.build.configurations.$ns = $angBuildCfg" | \
    jq ".projects.$prj.architect.build.configurations.$ns.fileReplacements[0].with=\"$envfn\"" | \
    jq ".projects.$prj.architect.serve.configurations.$ns.browserTarget = \"$prj:build:$ns\"" \
        > "$tmpcfg"
    mv "$tmpcfg" angular.json
}

update_envfiles()
{
    local fx="update_envfiles():"
    checkVars SC_SITECONFIG || return
    local service="$1"
    [ -z "$service" ] && (echo "$fx No service name provided! Nothing to do." && return)
    local targetDir="$service/$2"
    # make sure we're in the correct path
    [ -d "$targetDir" ] || (echo "$fx Target dir '$targetDir' not found! Nothing to do." && return)
    local sitecfg="$SC_SITECONFIG/$service"
    [ -d "$sitecfg" ] || (echo "$fx Siteconfig path '$sitecfg' not found!" && return)
    if [ "$service" = "catamel" ]; then
        # put first-time config files in place to get system running at all
        [ -f "$sitecfg/config.local.js" ] || cp "$targetDir/config.local.js-sample" "$sitecfg/config.local.js"
        [ -f "$sitecfg/providers.json" ] || cp "$targetDir/providers.json-sample" "$sitecfg/providers.json"
    fi
    cp -v "$sitecfg"/*.* "$targetDir/"
}

reset_envfiles()
{
    local targetDir; targetDir="$1"
    [ -d "$targetDir" ] || (echo "reset_envfiles(): Target dir '$targetDir' not found! Nothing to do." && return)
    (cd "$targetDir" && git checkout .)
}

create_dbuser()
{
    checkVars SC_SITECONFIG || return
    local service="$1"
    local svcjs="$SC_SITECONFIG/mongodb/${service}.js"
    local rootpwd; rootpwd="$(kubectl get secret -n dev local-mongodb \
        -o jsonpath="{.data.mongodb-root-password}" | base64 --decode)"
    local mongopod; mongopod=$(kubectl get pods --all-namespaces | awk '/mongo/ {print $2}')
    if [ -z "$mongopod" ]; then
        echo "No mongodb k8s pod found, can't create db user, giving up!"
        return
    fi
    local dbname; dbname="$(awk '/db:/ {gsub("^\"|\"$,?","",$2); print $2}' "$svcjs")"
    kubectl -n dev exec -i $mongopod \
        -- mongo -u root -p "$rootpwd" admin < "$svcjs"
}

delete_dbuser()
{
    checkVars SC_SITECONFIG || return
    local service="$1"
    local username="$2"
    local rootpwd; rootpwd="$(kubectl get secret -n dev local-mongodb \
        -o jsonpath="{.data.mongodb-root-password}" | base64 --decode)"
    local mongopod; mongopod=$(kubectl get pods --all-namespaces | awk '/mongo/ {print $2}')
    if [ -z "$mongopod" ]; then
        echo "No mongodb k8s pod found, can't create db user, giving up!"
        return
    fi
    local dbname; dbname="$(awk '/db:/ {gsub("^\"|\"$,?","",$2); print $2}' \
        "$SC_SITECONFIG/mongodb/${service}.js")"
    kubectl -n dev exec -i $mongopod \
        -- mongo $dbname -u root -p "$rootpwd" --authenticationDatabase admin -eval "db.dropUser(\"$username\")"
}

#
# functions for generating database/site credentials.
# Should be run before the database is deployed (with empty tables)
# It creates a directory structure in *siteconfig*
# with files included in the helm charts of the services.
#

newpwd()
{
    openssl rand -base64 16 | tr -d '+=/'
}

mongodb_createUserCmd()
{
    cat > "$1" <<EOF
use $4
db.createUser({
    user: "$2",
    pwd: "$3",
    roles: [{
        role: "readWrite",
        db: "$4"
    }]
});
EOF
}

gen_catamel_credentials()
{
    local fx="gen_catamel_credentials()"
    local srcdir="$(readlink -f "$1")"
    # provide the script directory as first argument
    [ -d "$srcdir" ] || (echo "$fx: Given script dir does not exist! '$srcdir'"; return)
    [ -d "$SC_SITECONFIG" ] || (echo "$fx: Given site config not found! '$SC_SITECONFIG'"; return)
    local dbusr=dacat
    local dbpwd=$(newpwd)
    local dbname=dacatdb
    local targetPath="$SC_SITECONFIG/catamel/datasources.json"
    if [ ! -f "$targetPath" ]; then
        mkdir -p "$(dirname "$targetPath")"
        jq ".mongo.user=\"$dbusr\"|.mongo.password=\"$dbpwd\"" "$srcdir/datasources.json" \
        | jq ".mongo.database=\"$dbname\"|.mongo.host=\"local-mongodb.dev\"" \
            > "$targetPath"
    fi
    targetPath="$SC_SITECONFIG/catamel/providers.json"
    if [ ! -f "$targetPath" ]; then
        mkdir -p "$(dirname "$targetPath")"
        jq "." "$srcdir/providers.json" > "$targetPath"
    fi
    targetPath="$SC_SITECONFIG/catamel/config.local.js"
    if [ ! -f "$targetPath" ]; then
        mkdir -p "$(dirname "$targetPath")"
        sed -e       "s/\(site:\\s*['\\\"]\)[^'\\\"]*\(['\\\"]\)/\\1$SC_SITE_NAME\\2/" \
            -e "s/\(facilities:\\s*\\[['\\\"]\)[^'\\\"]*\(['\\\"]\\]\)/\\1main\\2/" \
            -e  "s/\(pidPrefix:\\s*['\\\"]\)[^'\\\"]*\(['\\\"]\)/\\1notset\\2/" \
            -e  "s/\(doiPrefix:\\s*['\\\"]\)[^'\\\"]*\(['\\\"]\)/\\1notset\\2/" \
            "$srcdir/config.ess.js" > "$targetPath"
    fi
    targetPath="$SC_SITECONFIG/mongodb/catamel.js"
    if [ ! -f "$targetPath" ]; then
        mkdir -p "$(dirname "$targetPath")"
        mongodb_createUserCmd "$targetPath" "$dbusr" "$dbpwd" "$dbname"
    fi
}

gen_scichat_credentials()
{
    local fx="gen_scichat_credentials()"
    local srcdir="$(readlink -f "$1")"
    # provide the script directory as first argument
    [ -d "$srcdir" ] || (echo "$fx: Given script dir does not exist! '$srcdir'"; return)
    [ -d "$SC_SITECONFIG" ] || (echo "$fx: Given site config not found! '$SC_SITECONFIG'"; return)
    local dbusr=scichat
    local dbpwd=$(newpwd)
    local dbname=scichatdb
    local targetPath="$SC_SITECONFIG/scichat/datasources.json"
    if [ ! -f "$targetPath" ]; then
        mkdir -p "$(dirname "$targetPath")"
        jq ".mongo.user=\"$dbusr\"|.mongo.password=\"$dbpwd\"" "$srcdir/datasources.json" \
        | jq ".mongo.database=\"$dbname\"|.mongo.host=\"local-mongodb.dev\"" \
            > "$targetPath"
    fi
    cp "$srcdir/config.local.js" "$SC_SITECONFIG/scichat/config.local.js"
    targetPath="$SC_SITECONFIG/mongodb/scichat.js"
    if [ ! -f "$targetPath" ]; then
        mkdir -p "$(dirname "$targetPath")"
        mongodb_createUserCmd "$targetPath" "$dbusr" "$dbpwd" "$dbname"
    fi
}

updateSrcRepo()
{
    local url="$1"
    local branch="$2"
    local srcdir="component"
    if [ ! -d "$(pwd)/$srcdir" ]; then
        git clone "$url" "$srcdir" 1>&2
    fi
    cd "$srcdir" && \
    git stash save 1>&2 && \
    git checkout "$branch" 1>&2 && \
    git pull 1>&2 && \
    git show --format='%at_%h' HEAD
}

imageTagsEqual() {
    [ ! -z "$1" ] && [ ! -z "$2" ] && [ "$1" = "$2" ]
}

# vim: set ts=4 sw=4 sts=4 tw=0 ft=sh et:
