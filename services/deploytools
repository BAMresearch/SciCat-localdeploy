#!/bin/bash

getHostAddr()
{
    local devpath devname hostaddr
    devpath="$(readlink -f /sys/class/net/* | awk '{print $NF}' | grep -v vir)"
    devname="${devpath##*/}"
    hostaddr="$(ifconfig "$devname" | awk '/inet / {print $2}')"
    echo "$hostaddr"
}

injectEnvConfig()
{
    local prj="$1"
    local LOCAL_ENV="$2"
    local angEnv="$3"
    local angCfgBuild="$4"
    local angCfgServer="$5"
    local envfn="src/environments/environment.$LOCAL_ENV.ts"

    echo "$angEnv" > "$envfn"

    local angularCfg='angular.json'
    local tmpcfg; tmpcfg="$(mktemp)"
    # delete existing settings in angular config
    jq "del(.projects.$prj.architect.build.configurations.$LOCAL_ENV,
            .projects.$prj.architect.serve.configurations.$LOCAL_ENV,
            .projects.$prj.architect.server.configurations.$LOCAL_ENV)" \
        "$angularCfg" | \
    jq --arg envfn "$envfn" \
        ".projects.$prj.architect.build.configurations.$LOCAL_ENV = $angCfgBuild" \
        > "$tmpcfg"
    mv "$tmpcfg" "$angularCfg"
    if [ ! -z "$angCfgServer" ]; then
        jq --arg envfn "$envfn" \
            ".projects.$prj.architect.server.configurations.$LOCAL_ENV = $angCfgServer" \
            "$angularCfg" > "$tmpcfg"
        mv "$tmpcfg" "$angularCfg"
    fi
}

update_envfiles()
{
    local service; service="$1"
    if [ -z "$service" ]; then
        echo "$0: No service name provided! Nothing to do."
        return
    fi
    [ -d "$service" ] || return # make sure we're in the correct path
    local src; src="../../siteconfig/$service/envfiles"
    [ -d "$src" ] || return
    cp "$src"/* "$service/envfiles"
}

reset_envfiles()
{
    local service; service="$1"
    if [ -z "$service" ]; then
        echo "$0: No service name provided! Nothing to do."
        return
    fi
    git checkout "$service/envfiles"
}

create_dbuser()
{
    local service="$1"
    local sitecfgpath="../../siteconfig"
    local rootpwd; rootpwd="$(awk '/mongodbRootPassword/ {print $2}' \
        "$sitecfgpath"/mongodb/credentials.yaml)"
    local mongopod; mongopod=$(kubectl get pods --all-namespaces | awk '/mongo/ {print $2}')
    if [ -z "$mongopod" ]; then
        echo "No mongodb k8s pod found, can't create db user, giving up!"
        return
    fi
    local dbname; dbname="$(awk '/db:/ {gsub("^\"|\"$,?","",$2); print $2}' \
        "$sitecfgpath"/mongodb/${service}.js)"
    kubectl -n dev exec -i $mongopod \
        -- mongo -u root -p "$rootpwd" admin < "$sitecfgpath"/mongodb/${service}.js
}

# vim: set ts=4 sw=4 sts=4 tw=0 et:
