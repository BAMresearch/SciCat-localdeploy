# services/deploytools
# helper functions for use in several places
# USAGE:
#   $ source services/deploytools

# replace needed docker commands if alternatives are used
DOCKER_BUILD="docker build"
DOCKER_PUSH="docker push"
if ! command -v docker; then
    DOCKER_BUILD="buildah bud"
    DOCKER_PUSH="buildah push"
fi

# makes sure required ENV vars exist (supplied by arguments)
checkVars()
{
    for name in $@; do
        if eval "[ -z \"\$$name\" ]"; then
            echo "$name not defined! Please run 'export $name=<your value>' first."
            return 1
        fi
    done
}

getHostAddr()
{
    local devpath devname hostaddr
    devpath="$(readlink -f /sys/class/net/* | awk '{print $NF}' | grep -v vir)"
    devname="${devpath##*/}"
    hostaddr="$(ifconfig "$devname" | awk '/inet / {print $2}')"
    echo "$hostaddr"
}

injectEnvConfig()
{
    local prj="$1"
    local LOCAL_ENV="$2"
    local angEnv="$3"
    local angCfgBuild="$4"
    local angCfgServer="$5"
    local envfn="src/environments/environment.$LOCAL_ENV.ts"

    echo "$angEnv" > "$envfn"

    local angularCfg='angular.json'
    local tmpcfg; tmpcfg="$(mktemp)"
    # delete existing settings in angular config
    jq "del(.projects.$prj.architect.build.configurations.$LOCAL_ENV,
            .projects.$prj.architect.serve.configurations.$LOCAL_ENV,
            .projects.$prj.architect.server.configurations.$LOCAL_ENV)" \
        "$angularCfg" | \
    jq --arg envfn "$envfn" \
        ".projects.$prj.architect.build.configurations.$LOCAL_ENV = $angCfgBuild" \
        > "$tmpcfg"
    mv "$tmpcfg" "$angularCfg"
    jq \
        ".projects.$prj.architect.serve.configurations.$LOCAL_ENV.browserTarget = \"$prj:build:$LOCAL_ENV\"" \
        "$angularCfg" > "$tmpcfg"
    mv "$tmpcfg" "$angularCfg"
}

update_envfiles()
{
    local fx="update_envfiles():"
    checkVars SITECONFIG || return
    local service; service="$1"
    [ -z "$service" ] && (echo "$fx No service name provided! Nothing to do." && return)
    local targetDir; targetDir="$service/$2"
    [ -d "$targetDir" ] || (echo "$fx Target dir '$targetDir' not found! Nothing to do." && return)
    fi
    # make sure we're in the correct path
    [ -d "$service" ] || (echo "$fx Service path '$service' not found!" && return)
    local src; src="$SITECONFIG/$service"
    [ -d "$src" ] || (echo "$fx Service path '$src' not found!" && return)
    if [ "$service" = "catamel" ]; then
	# put first-time config files in place to get system running at all
        [ -f "$src"/config.local.js ] || cp catamel/component/server/config.local.js-sample "$src"/config.local.js
        [ -f "$src"/providers.json ] || cp catamel/component/server/providers.json-sample "$src"/providers.json
    fi
    cp -v "$src"/* "$targetDir"
}

reset_envfiles()
{
    local targetDir; targetDir="$1"
    [ -d "$targetDir" ] ||Â (echo "reset_envfiles(): Given target dir does not exist! Nothing to do." && return)
    (cd "$targetDir" && git checkout .)
}

create_dbuser()
{
    checkVars SITECONFIG || return
    local service="$2"
    local svcjs="$SITECONFIG/mongodb/${service}.js"
    local rootpwd; rootpwd="$(kubectl get secret -n dev local-mongodb \
        -o jsonpath="{.data.mongodb-root-password}" | base64 --decode)"
    local mongopod; mongopod=$(kubectl get pods --all-namespaces | awk '/mongo/ {print $2}')
    if [ -z "$mongopod" ]; then
        echo "No mongodb k8s pod found, can't create db user, giving up!"
        return
    fi
    local dbname; dbname="$(awk '/db:/ {gsub("^\"|\"$,?","",$2); print $2}' "$svcjs")"
    kubectl -n dev exec -i $mongopod \
        -- mongo -u root -p "$rootpwd" admin < "$svcjs"
}

delete_dbuser()
{
    checkVars SITECONFIG || return
    local service="$1"
    local username="$2"
    local rootpwd; rootpwd="$(kubectl get secret -n dev local-mongodb \
        -o jsonpath="{.data.mongodb-root-password}" | base64 --decode)"
    local mongopod; mongopod=$(kubectl get pods --all-namespaces | awk '/mongo/ {print $2}')
    if [ -z "$mongopod" ]; then
        echo "No mongodb k8s pod found, can't create db user, giving up!"
        return
    fi
    local dbname; dbname="$(awk '/db:/ {gsub("^\"|\"$,?","",$2); print $2}' \
        "$SITECONFIG/mongodb/${service}.js")"
    kubectl -n dev exec -i $mongopod \
        -- mongo $dbname -u root -p "$rootpwd" --authenticationDatabase admin -eval "db.dropUser(\"$username\")"
}

#
# functions for generating database/site credentials.
# Should be run before the database is deployed (with empty tables)
# It creates a directory structure in *siteconfig*
# with files included in the helm charts of the services.
#

newpwd()
{
    openssl rand -base64 16 | tr -d '+=/'
}

mongodb_createUserCmd()
{
    cat > "$1" <<EOF
use $4
db.createUser({
    user: "$2",
    pwd: "$3",
    roles: [{
        role: "readWrite",
        db: "$4"
    }]
});
EOF
}

gen_catamel_credentials()
{
    local oldpath; oldpath=$(pwd) # pushd
    # provide the working directory 'siteconfig' as first argument
    cd "$1" || (echo "gen_catamel_credentials(): Failed to enter '$1'" && return)
    local dbusr=dacat
    local dbpwd=$(newpwd)
    local dbname=dacatdb
    local path; path="catamel"
    mkdir -p "$path"
    local srcpath="$scriptdir/services/catamel/dacat-api-server/envfiles"
    cp $srcpath/datasources.json "$path"/
    sed -i -e '/"user":/ s/"[^"]*"\(,\?\)\s*$/"'$dbusr'"\1/' \
        -e '/"password":/ s/"[^"]*"\(,\?\)\s*$/"'$dbpwd'"\1/' \
        -e '/"database":/ s/"[^"]*"\(,\?\)\s*$/"'$dbname'"\1/' \
        "$path"/datasources.json
    mkdir -p mongodb
    mongodb_createUserCmd mongodb/catamel.js "$dbusr" "$dbpwd" "$dbname"
    cd "$oldpath" # popd
}

gen_scichat_credentials()
{
    local oldpath; oldpath=$(pwd) # pushd
    # provide the working directory 'siteconfig' as first argument
    cd "$1" || (echo "gen_scichat_credentials(): Failed to enter '$1'" && return)
    local dbusr=scichat
    local dbpwd=$(newpwd)
    local dbname=scichatdb
    local path; path="scichat"
    mkdir -p "$path"
    cp "$scriptdir/services/scichat-loopback/scichat/envfiles/datasources.json" "$path"/
    sed -i -e '/"user":/ s/"[^"]*"\(,\?\)\s*$/"'$dbusr'"\1/' \
        -e '/"password":/ s/"[^"]*"\(,\?\)\s*$/"'$dbpwd'"\1/' \
        -e '/"database":/ s/"[^"]*"\(,\?\)\s*$/"'$dbname'"\1/' \
        "$path"/datasources.json
    mongodb_createUserCmd mongodb/scichat.js "$dbusr" "$dbpwd" "$dbname"
    cd "$oldpath" # popd
}

# vim: set ts=4 sw=4 sts=4 tw=0 ft=sh et:
