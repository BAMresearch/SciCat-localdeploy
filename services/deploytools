#!/bin/bash

getHostAddr()
{
    local devpath devname hostaddr
    devpath="$(readlink -f /sys/class/net/* | awk '{print $NF}' | grep -v virtual)"
    devname="${devpath##*/}"
    hostaddr="$(ifconfig "$devname" | awk '/inet\s/ {print $2}')"
    echo "$hostaddr"
}

injectEnvConfig()
{
    local prj="$1"
    local LOCAL_ENV="$2"
    local angEnv="$3"
    local angCfgBuild="$4"
    local angCfgServer="$5"
    local envfn="src/environments/environment.$LOCAL_ENV.ts"

    echo "$angEnv" > "$envfn"

    local angularCfg='angular.json'
    local tmpcfg; tmpcfg="$(mktemp)"
    # delete existing settings in angular config
    jq "del(.projects.$prj.architect.build.configurations.$LOCAL_ENV,
            .projects.$prj.architect.serve.configurations.$LOCAL_ENV,
            .projects.$prj.architect.server.configurations.$LOCAL_ENV)" \
        "$angularCfg" | \
    jq --arg envfn "$envfn" \
        ".projects.$prj.architect.build.configurations.$LOCAL_ENV = $angCfgBuild" \
        > "$tmpcfg"
    mv "$tmpcfg" "$angularCfg"
    if [ ! -z "$angCfgServer" ]; then
        jq --arg envfn "$envfn" \
            ".projects.$prj.architect.server.configurations.$LOCAL_ENV = $angCfgServer" \
            "$angularCfg" > "$tmpcfg"
    fi
    mv "$tmpcfg" "$angularCfg"
}

# vim: set ts=4 sw=4 sts=4 tw=0 et:
